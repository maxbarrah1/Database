/*

SUBJECT (SUBJCODE, DESCRIPTION)
PRIMARY KEY (SUBJCODE)

TEACHER (STAFFID, SURNAME, GIVENNAME)
PRIMARY KEY (STAFFID)

STUDENT (STUDENTID, SURNAME, GIVENNAME, GENDER)
PRIMARY KEY (STUDENTID)

SUBJECTOFFERING (SUBJCODE, YEAR, SEMESTER, FEE,  STAFFID)
PRIMARY KEY (SUBJCODE, YEAR, SEMESTER)
FORIEGN KEY (SUBJCODE) REFERENCES SUBJECT
FORIEGN KEY (STAFFID) REFERENCES TEACHER

ENROLMENT (STUDENTID, SUBJCODE, YEAR, SEMESTER, DATE ENROLLED, GRADE)
PRIMARY KEY (STUDENTID, SUBJCODE, YEAR, SEMESTER)
FORIEGN KEY (STUDENTID) REFERENCES STUDENT
FORIEGN KEY (SUBJCODE, YEAR, SEMESTER) REFERENCES SUBJECTOFFERING

*/

DROP TABLE SUBJECT 

CREATE DATABASE AT1T2
USE AT1T2

GO

CREATE TABLE SUBJECT (
      SUBJCODE NVARCHAR(100)
    , DESCRIPTION NVARCHAR(500)
    , PRIMARY KEY (SUBJCODE)

);

CREATE TABLE TEACHER (
      STAFFID INT 
    , SURNAME NVARCHAR(100) NOT NULL
    , GIVENNAME NVARCHAR(100) NOT NULL
, PRIMARY KEY (STAFFID)
, CONSTRAINT CK_STAFFID CHECK( LEN (STAFFID) = 8 )
);

CREATE TABLE STUDENT (
      STUDENTID NVARCHAR(10)
    , SURNAME NVARCHAR(100) NOT NULL
    , GIVENNAME NVARCHAR(100) NOT NULL
    , GENDER NVARCHAR(1)
, PRIMARY KEY (STUDENTID)
, CONSTRAINT CK_GENDER CHECK (GENDER IN ('M', 'F', 'I')) 
);

CREATE TABLE SUBJECTOFFERING (
      SUBJCODE NVARCHAR(100)
    , YEAR INT
    , SEMESTER INT 
    , FEE MONEY NOT NULL
    , STAFFID INT
, PRIMARY KEY (SUBJCODE, YEAR, SEMESTER)
, FOREIGN KEY (SUBJCODE) REFERENCES SUBJECT
, FOREIGN KEY (STAFFID) REFERENCES TEACHER
, CONSTRAINT CK_YEAR CHECK( LEN (YEAR) = 4 )
, CONSTRAINT CK_SEMESTER CHECK (SEMESTER IN (1, 2)) 
, CONSTRAINT CK_FEE CHECK (FEE > (0)) 
);

CREATE TABLE ENROLMENT (
      STUDENTID NVARCHAR(10)
    , SUBJCODE NVARCHAR(100)
    , YEAR INT
    , SEMESTER INT 
    , GRADE NVARCHAR(2) DEFAULT NULL
    , DATEENROLLED DATE
, PRIMARY KEY (STUDENTID, SUBJCODE, YEAR, SEMESTER)
, FOREIGN KEY (STUDENTID) REFERENCES STUDENT
, FOREIGN KEY (SUBJCODE, YEAR, SEMESTER) REFERENCES SUBJECTOFFERING
, CONSTRAINT CK_YEAR_ENROLMENT CHECK( LEN (YEAR) = 4 )
, CONSTRAINT CK_SEMESTER_ENROLMENT CHECK (SEMESTER IN (1, 2)) 
, CONSTRAINT CK_GRADE_ENROLMENT CHECK (GRADE IN ('N', 'P', 'C', 'D', 'HD') )
);


INSERT INTO SUBJECT (SUBJCODE, DESCRIPTION) VALUES
('ICTPRG418',	'Apply SQL to extract & manipulate data'),
('ICTBSB430',	'Create Basic Databases'),
('ICTDBS205',	'Design a Database');

--SELECT * FROM SUBJECT

INSERT INTO TEACHER (STAFFID, SURNAME, GIVENNAME) VALUES
(98776655,	'Young',	'Angus'),
(87665544,	'Scott',	'Bon'),
(76554433,	'Slade',	'Chris');

--SELECT * FROM STUDENT

INSERT INTO STUDENT (STUDENTID, SURNAME, GIVENNAME, GENDER) VALUES
('s12233445',	'Baird',	'Tim',	'M'),
('s23344556',	'Nguyen',	'Anh',	'M'),
('s34455667',	'Hallinan',	'James',	'M');

--SELECT * FROM STUDENT

INSERT INTO SUBJECTOFFERING (SUBJCODE, YEAR, SEMESTER, FEE,  STAFFID) VALUES
('ICTPRG418',	2019,	1,	200,	98776655),
('ICTPRG418',	2020,	1,	225,	98776655),
('ICTBSB430',	2020,	1,	200,	87665544),
('ICTBSB430',	2020,	2,	200,	76554433),
('ICTDBS205',	2019,	2,	225,	87665544);

--SELECT * FROM SUBJECTOFFERING

INSERT INTO ENROLMENT (STUDENTID, SUBJCODE, YEAR, SEMESTER, GRADE, DATEENROLLED) VALUES
('s12233445',	'ICTPRG418',	2019,	1,	'D',	'02/25/2019'),
('s23344556',	'ICTPRG418',	2019,	1,	'P',	'02/15/2019'),
('s12233445',	'ICTPRG418',	2020,	1,	'C',	'01/30/2020'),
('s23344556',	'ICTPRG418',	2020,	1,	'HD',	'02/26/2020'),
('s34455667',	'ICTPRG418',	2020,	1,	'P',	'01/28/2020'),
('s12233445',	'ICTBSB430',	2020,	1,	'C',	'02/08/2020'),
('s23344556',	'ICTBSB430',	2020,	2,	NULL,	'06/30/2020'),
('s34455667',	'ICTBSB430',	2020,	2,	NULL,	'07/03/2020'),
('s23344556',	'ICTDBS205',	2019,	2,	'P',	'07/01/2019'),
('s34455667',	'ICTDBS205',	2019,	2,	'N',	'07/13/2019');

--SELECT * FROM ENROLMENT



/*Write a query that shows the student first name and surname, the subject code and
description, the subject offering year, semester & fee and the given name and surname of the
teacher for that subject offering.*/

SELECT ST.GIVENNAME, ST.SURNAME, SU.SUBJCODE, SU.DESCRIPTION, S.YEAR, S.SEMESTER, S.FEE, T.GIVENNAME, T.SURNAME FROM ENROLMENT E
INNER JOIN SUBJECTOFFERING S
ON E.SUBJCODE = S.SUBJCODE AND E.YEAR = S.YEAR AND E.SEMESTER = S.SEMESTER 
INNER JOIN STUDENT ST 
ON E.STUDENTID = ST.STUDENTID
INNER JOIN SUBJECT SU 
ON S.SUBJCODE = SU.SUBJCODE
INNER JOIN TEACHER T 
ON S.STAFFID = T.STAFFID;

/*Write a query which shows the number of enrolments, for each year and semester in the
following example format.*/
SELECT YEAR, SEMESTER, COUNT(*) AS 'ENROLMENT NUM'
FROM ENROLMENT
GROUP BY YEAR, SEMESTER;


/*Write a query which lists all enrolments which for the subject offering which has the highest
fee. (This query must use a sub-query.)*/
SELECT E.*
FROM ENROLMENT E
INNER JOIN SUBJECTOFFERING S 
ON E.SUBJCODE = S.SUBJCODE AND E.YEAR = S.YEAR AND E.SEMESTER = S.SEMESTER 
WHERE S.FEE IN (SELECT MAX(FEE) FROM SUBJECTOFFERING);

/*CREATE VIEW BASED OFF FIRST QUERY*/

CREATE VIEW TASK5 AS 
SELECT ST.GIVENNAME AS STGIVENNAME, ST.SURNAME AS STSURNAME, SU.SUBJCODE, SU.DESCRIPTION, S.YEAR, S.SEMESTER, S.FEE, T.GIVENNAME, T.SURNAME FROM ENROLMENT E
INNER JOIN SUBJECTOFFERING S
ON E.SUBJCODE = S.SUBJCODE AND E.YEAR = S.YEAR AND E.SEMESTER = S.SEMESTER 
INNER JOIN STUDENT ST 
ON E.STUDENTID = ST.STUDENTID
INNER JOIN SUBJECT SU 
ON S.SUBJCODE = SU.SUBJCODE
INNER JOIN TEACHER T 
ON S.STAFFID = T.STAFFID;


/* TASK 6 */
SELECT * FROM SUBJECTOFFERING
SELECT * FROM STUDENT
SELECT * FROM TECHER
SELECT * FROM ENROLMENT
SELECT * FROM SUBJECT
--FOR FIRST QUERY CHECKING ALL TABLES TO MAKE SURE THOSE COLUMNS EXIST AND DATA IS CORRECT

SELECT * FROM ENROLMENT 
SELECT COUNT(*) FROM ENROLMENT
/*DATA COLUMNS MATCH THE COUNT RESULT FOR SECOND QUERY BY CHECKING THE RESULT
FROM THE COUNT AND COUNTING THE ROWS IN THE SELECT ALL QUERY AS LONG AS THE RESULTS MATCH IT IS CORRECT*/


SELECT MAX(FEE) FROM SUBJECTOFFERING
SELECT FEE FROM SUBJECTOFFERING
/*BY CHECKING THE MAX FEE AND THE CHECKING THE LIST OF THE FEES IN THE TABLE
I CAN CROSS REFERENCE THIS TO THE EXCEL SPREADSHEET AND TO THE ORIGINAL QUERY TO 
ENSURE RESULT IS CORRECT*/

